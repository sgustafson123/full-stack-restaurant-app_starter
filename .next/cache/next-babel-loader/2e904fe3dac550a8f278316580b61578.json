{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nimport { useContext, useState } from \"react\";\nimport Head from \"next/head\";\nimport AppContext from \"../components/context\";\nimport Home from \"./index\";\nimport Layout from \"../components/layout\";\nimport Cookie from \"js-cookie\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nfunction MyApp(props) {\n  var _useContext = useContext(AppContext),\n    cart = _useContext.cart,\n    addItem = _useContext.addItem,\n    removeItem = _useContext.removeItem,\n    user = _useContext.user,\n    setUser = _useContext.setUser;\n  var _useState = useState({\n      cart: cart\n    }),\n    state = _useState[0],\n    setState = _useState[1];\n  var Component = props.Component,\n    pageProps = props.pageProps;\n  setUser = function setUser(user) {\n    setState({\n      user: user\n    });\n  };\n  addItem = function addItem(item) {\n    var items = state.cart.items;\n    //check for item already in cart\n    //if not in cart, add item if item is found increase quanity ++\n    var foundItem = true;\n    if (items.length > 0) {\n      foundItem = items.find(function (i) {\n        return i.id === item.id;\n      });\n      if (!foundItem) foundItem = false;\n    } else {\n      foundItem = false;\n    }\n    console.log(\"Found Item value: \".concat(JSON.stringify(foundItem)));\n    // if item is not new, add to cart, set quantity to 1\n    if (!foundItem) {\n      //set quantity property to 1\n\n      var temp = JSON.parse(JSON.stringify(item));\n      temp.quantity = 1;\n      var newCart = {\n        items: [].concat(_toConsumableArray(state.cart.items), [temp]),\n        total: state.cart.total + item.price\n      };\n      setState({\n        cart: newCart\n      });\n      console.log(\"Total items: \".concat(JSON.stringify(newCart)));\n    } else {\n      // we already have it so just increase quantity ++\n      console.log(\"Total so far:  \".concat(state.cart.total));\n      newCart = {\n        items: items.map(function (item) {\n          if (item.id === foundItem.id) {\n            return Object.assign({}, item, {\n              quantity: item.quantity + 1\n            });\n          } else {\n            return item;\n          }\n        }),\n        total: state.cart.total + item.price\n      };\n    }\n    setState({\n      cart: newCart\n    }); // problem is this is not updated yet\n    console.log(\"state reset to cart:\".concat(JSON.stringify(state)));\n  };\n  removeItem = function removeItem(item) {\n    var items = state.cart.items;\n    //check for item already in cart\n    var foundItem = items.find(function (i) {\n      return i.id === item.id;\n    });\n    if (foundItem.quantity > 1) {\n      var newCart = {\n        items: items.map(function (item) {\n          if (item.id === foundItem.id) {\n            return Object.assign({}, item, {\n              quantity: item.quantity - 1\n            });\n          } else {\n            return item;\n          }\n        }),\n        total: state.cart.total - item.price\n      };\n      //console.log(`NewCart after remove: ${JSON.stringify(newCart)}`)\n    } else {\n      // only 1 in the cart so remove the whole item\n      console.log(\"Try remove item \".concat(JSON.stringify(foundItem)));\n      var index = items.findIndex(function (i) {\n        return i.id === foundItem.id;\n      });\n      items.splice(index, 1);\n      var newCart = {\n        items: items,\n        total: state.cart.total - item.price\n      };\n    }\n    setState({\n      cart: newCart\n    });\n  };\n  return /*#__PURE__*/_jsxs(AppContext.Provider, {\n    value: {\n      cart: state.cart,\n      addItem: addItem,\n      removeItem: removeItem,\n      isAuthenticated: false,\n      user: null,\n      setUser: function setUser() {}\n    },\n    children: [/*#__PURE__*/_jsx(Head, {\n      children: /*#__PURE__*/_jsx(\"link\", {\n        rel: \"stylesheet\",\n        href: \"https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/css/bootstrap.min.css\",\n        integrity: \"sha384-Gn5384xqQ1aoWXA+058RXPxPg6fy4IWvTNh0E263XmFcJlSAwiGgFAW/dAiS6JXm\",\n        crossOrigin: \"anonymous\"\n      })\n    }), /*#__PURE__*/_jsx(Layout, {\n      children: /*#__PURE__*/_jsx(Component, _objectSpread({}, pageProps))\n    })]\n  });\n}\nexport default MyApp;","map":null,"metadata":{},"sourceType":"module"}